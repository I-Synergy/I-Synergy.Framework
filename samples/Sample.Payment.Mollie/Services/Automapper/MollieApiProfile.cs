using System.Globalization;
using AutoMapper;
using ISynergy.Framework.Payment.Mollie.Abstractions.Models;
using ISynergy.Framework.Payment.Mollie.Models;
using ISynergy.Framework.Payment.Mollie.Models.Customer;
using ISynergy.Framework.Payment.Mollie.Models.List;
using ISynergy.Framework.Payment.Mollie.Models.Mandate;
using ISynergy.Framework.Payment.Mollie.Models.Payment.Request;
using ISynergy.Framework.Payment.Mollie.Models.Payment.Response;
using ISynergy.Framework.Payment.Mollie.Models.PaymentMethod;
using ISynergy.Framework.Payment.Mollie.Models.Subscription;
using Mollie.Sample.Models;

namespace Mollie.Sample.Services.Automapper
{
    /// <summary>
    /// Class MollieApiProfile.
    /// Implements the <see cref="Profile" />
    /// </summary>
    /// <seealso cref="Profile" />
    /// <autogeneratedoc />
    public class MollieApiProfile : Profile {
        /// <summary>
        /// Initializes a new instance of the <see cref="MollieApiProfile"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public MollieApiProfile() {
            CreateMap<CreatePaymentModel, PaymentRequest>()
                .ForMember(x => x.Amount, m => m.MapFrom(x => new Amount(x.Currency, x.Amount.ToString(CultureInfo.InvariantCulture))));

            CreateMap<CreateSubscriptionModel, SubscriptionRequest>()
                .ForMember(x => x.Amount, m => m.MapFrom(x => new Amount(x.Currency, x.Amount.ToString(CultureInfo.InvariantCulture))))
                .ForMember(x => x.Interval, m => m.MapFrom(x => $"{x.IntervalAmount} {x.IntervalPeriod.ToString().ToLower()}"));

            CreateMap<CreateCustomerModel, CustomerRequest>();

            CreateOverviewMap<PaymentResponse>();
            CreateOverviewMap<CustomerResponse>();
            CreateOverviewMap<SubscriptionResponse>();
            CreateOverviewMap<MandateResponse>();
            CreateOverviewMap<PaymentMethodResponse>();
        }

        /// <summary>
        /// Creates the overview map.
        /// </summary>
        /// <typeparam name="TResponseType">The type of the t response type.</typeparam>
        /// <autogeneratedoc />
        private void CreateOverviewMap<TResponseType>() where TResponseType : IResponseObject {
            CreateMap<ListResponse<TResponseType>, OverviewModel<TResponseType>>()
                .ForMember(x => x.Items, m => m.MapFrom(x => x.Items))
                .ForMember(x => x.Navigation, m => m.MapFrom(x => new OverviewNavigationLinksModel(x.Links.Previous, x.Links.Next)));
        }
    }
}
