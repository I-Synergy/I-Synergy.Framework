// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sample.Synchronization;

#nullable disable

namespace Sample.Synchronization.Migrations
{
    [DbContext(typeof(AdventureWorksContext))]
    [Migration("20211205211011_0001")]
    partial class _0001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Sample.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 275, DateTimeKind.Local).AddTicks(6290));

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("StateProvince");

                    b.HasIndex("City", "StateProvince", "PostalCode", "CountryRegion");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            AddressLine1 = "8713 Yosemite Ct.",
                            City = "Bothell",
                            CountryRegion = "United States",
                            PostalCode = "98011",
                            StateProvince = "Washington"
                        },
                        new
                        {
                            AddressId = 2,
                            AddressLine1 = "1318 Lasalle Street",
                            City = "Bothell",
                            CountryRegion = "United States",
                            PostalCode = "98011",
                            StateProvince = "Washington"
                        },
                        new
                        {
                            AddressId = 3,
                            AddressLine1 = "9178 Jumping St.",
                            City = "Dallas",
                            CountryRegion = "United States",
                            PostalCode = "75201",
                            StateProvince = "Texas"
                        },
                        new
                        {
                            AddressId = 4,
                            AddressLine1 = "9228 Via Del Sol",
                            City = "Phoenix",
                            CountryRegion = "United States",
                            PostalCode = "85004",
                            StateProvince = "Arizona"
                        },
                        new
                        {
                            AddressId = 5,
                            AddressLine1 = "26910 Indela Road",
                            City = "Montreal",
                            CountryRegion = "Canada",
                            PostalCode = "H1Y 2H5",
                            StateProvince = "Quebec"
                        },
                        new
                        {
                            AddressId = 6,
                            AddressLine1 = "2681 Eagle Peak",
                            City = "Bellevue",
                            CountryRegion = "United States",
                            PostalCode = "98004",
                            StateProvince = "Washington"
                        },
                        new
                        {
                            AddressId = 7,
                            AddressLine1 = "7943 Walnut Ave",
                            City = "Renton",
                            CountryRegion = "United States",
                            PostalCode = "98055",
                            StateProvince = "Washington"
                        },
                        new
                        {
                            AddressId = 8,
                            AddressLine1 = "6388 Lake City Way",
                            City = "Burnaby",
                            CountryRegion = "Canada",
                            PostalCode = "V5A 3A6",
                            StateProvince = "British Columbia"
                        },
                        new
                        {
                            AddressId = 9,
                            AddressLine1 = "52560 Free Street",
                            City = "Toronto",
                            CountryRegion = "Canada",
                            PostalCode = "M4B 1V7",
                            StateProvince = "Ontario"
                        },
                        new
                        {
                            AddressId = 10,
                            AddressLine1 = "22580 Free Street",
                            City = "Toronto",
                            CountryRegion = "Canada",
                            PostalCode = "M4B 1V7",
                            StateProvince = "Ontario"
                        },
                        new
                        {
                            AddressId = 11,
                            AddressLine1 = "2575 Bloor Street East",
                            City = "Toronto",
                            CountryRegion = "Canada",
                            PostalCode = "M4B 1V6",
                            StateProvince = "Ontario"
                        },
                        new
                        {
                            AddressId = 12,
                            AddressLine1 = "Station E",
                            City = "Chalk Riber",
                            CountryRegion = "Canada",
                            PostalCode = "K0J 1J0",
                            StateProvince = "Ontario"
                        },
                        new
                        {
                            AddressId = 13,
                            AddressLine1 = "575 Rue St Amable",
                            City = "Quebec",
                            CountryRegion = "Canada",
                            PostalCode = "G1R",
                            StateProvince = "Quebec"
                        },
                        new
                        {
                            AddressId = 14,
                            AddressLine1 = "2512-4th Ave Sw",
                            City = "Calgary",
                            CountryRegion = "Canada",
                            PostalCode = "T2P 2G8",
                            StateProvince = "Alberta"
                        },
                        new
                        {
                            AddressId = 15,
                            AddressLine1 = "55 Lakeshore Blvd East",
                            City = "Toronto",
                            CountryRegion = "Canada",
                            PostalCode = "M4B 1V6",
                            StateProvince = "Ontario"
                        },
                        new
                        {
                            AddressId = 16,
                            AddressLine1 = "6333 Cote Vertu",
                            City = "Montreal",
                            CountryRegion = "Canada",
                            PostalCode = "H1Y 2H5",
                            StateProvince = "Quebec"
                        },
                        new
                        {
                            AddressId = 17,
                            AddressLine1 = "3255 Front Street West",
                            City = "Toronto",
                            CountryRegion = "Canada",
                            PostalCode = "H1Y 2H5",
                            StateProvince = "Ontario"
                        },
                        new
                        {
                            AddressId = 18,
                            AddressLine1 = "2550 Signet Drive",
                            City = "Weston",
                            CountryRegion = "Canada",
                            PostalCode = "H1Y 2H7",
                            StateProvince = "Ontario"
                        },
                        new
                        {
                            AddressId = 19,
                            AddressLine1 = "6777 Kingsway",
                            City = "Burnaby",
                            CountryRegion = "Canada",
                            PostalCode = "H1Y 2H8",
                            StateProvince = "British Columbia"
                        },
                        new
                        {
                            AddressId = 20,
                            AddressLine1 = "5250-505 Burning St",
                            City = "Vancouver",
                            CountryRegion = "Canada",
                            PostalCode = "H1Y 2H9",
                            StateProvince = "British Columbia"
                        },
                        new
                        {
                            AddressId = 21,
                            AddressLine1 = "600 Slater Street",
                            City = "Ottawa",
                            CountryRegion = "Canada",
                            PostalCode = "M9V 4W3",
                            StateProvince = "Ontario"
                        });
                });

            modelBuilder.Entity("Sample.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 275, DateTimeKind.Local).AddTicks(8235));

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesPerson")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("CustomerId");

                    b.HasIndex("EmailAddress");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("737e9052-54f5-464e-9f2e-f27ca5122ecf"),
                            CompanyName = "A Bike Store",
                            EmailAddress = "orlando0@adventure-works.com",
                            EmployeeId = 1,
                            FirstName = "Orlando",
                            LastName = "Gee",
                            MiddleName = "N.",
                            NameStyle = false,
                            PasswordHash = "L/Rlwxzp4w7RWmEgXX+/A7cXaePEPcp+KwQhl2fJL7w=",
                            PasswordSalt = "1KjXYs4=",
                            Phone = "245-555-0173",
                            SalesPerson = "adventure-works\\pamela0",
                            Title = "Mr."
                        },
                        new
                        {
                            CustomerId = new Guid("370b78fe-c755-476e-8cff-06a99650af94"),
                            CompanyName = "Progressive Sports",
                            EmailAddress = "keith0@adventure-works.com",
                            EmployeeId = 1,
                            FirstName = "Keith",
                            LastName = "Harris",
                            MiddleName = "N.",
                            NameStyle = false,
                            PasswordHash = "YPdtRdvqeAhj6wyxEsFdshBDNXxkCXn+CRgbvJItknw=",
                            PasswordSalt = "fs1ZGhY=",
                            Phone = "170-555-0127",
                            SalesPerson = "adventure-works\\david8",
                            Title = "Mr."
                        },
                        new
                        {
                            CustomerId = new Guid("45672e0d-0456-4e9a-9492-d334f859e928"),
                            CompanyName = "Advanced Bike Components",
                            EmailAddress = "donna0@adventure-works.com",
                            EmployeeId = 2,
                            FirstName = "Donna",
                            LastName = "Carreras",
                            MiddleName = "F.",
                            NameStyle = false,
                            PasswordHash = "LNoK27abGQo48gGue3EBV/UrlYSToV0/s87dCRV7uJk=",
                            PasswordSalt = "YTNH5Rw=",
                            Phone = "279-555-0130",
                            SalesPerson = "adventure-works\\jillian0",
                            Title = "Ms."
                        },
                        new
                        {
                            CustomerId = new Guid("e4b1d888-53ec-4f47-9866-04c027204c47"),
                            CompanyName = "Modular Cycle Systems",
                            EmailAddress = "janet1@adventure-works.com",
                            EmployeeId = 3,
                            FirstName = "Janet",
                            LastName = "Gates",
                            MiddleName = "M.",
                            NameStyle = false,
                            PasswordHash = "ElzTpSNbUW1Ut+L5cWlfR7MF6nBZia8WpmGaQPjLOJA=",
                            PasswordSalt = "nm7D5e4=",
                            Phone = "710-555-0173",
                            SalesPerson = "adventure-works\\jillian0",
                            Title = "Ms."
                        });
                });

            modelBuilder.Entity("Sample.Models.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 276, DateTimeKind.Local).AddTicks(1237));

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerAddress");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("737e9052-54f5-464e-9f2e-f27ca5122ecf"),
                            AddressId = 4,
                            AddressType = "Main Office"
                        },
                        new
                        {
                            CustomerId = new Guid("737e9052-54f5-464e-9f2e-f27ca5122ecf"),
                            AddressId = 5,
                            AddressType = "Office Depot"
                        },
                        new
                        {
                            CustomerId = new Guid("370b78fe-c755-476e-8cff-06a99650af94"),
                            AddressId = 3,
                            AddressType = "Main Office"
                        },
                        new
                        {
                            CustomerId = new Guid("45672e0d-0456-4e9a-9492-d334f859e928"),
                            AddressId = 2,
                            AddressType = "Main Office"
                        },
                        new
                        {
                            CustomerId = new Guid("e4b1d888-53ec-4f47-9866-04c027204c47"),
                            AddressId = 1,
                            AddressType = "Main Office"
                        });
                });

            modelBuilder.Entity("Sample.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 276, DateTimeKind.Local).AddTicks(5637));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductCategoryId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("ProductCategoryID");

                    b.Property<int?>("ProductModelId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SellStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Size")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_ProductNumber");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("9e2a8668-bedb-42d5-b9c5-7637f632efad"),
                            Color = "Black",
                            ListPrice = 1431.5000m,
                            Name = "HL Road Frame - Black, 58",
                            ProductCategoryId = "ROADFR",
                            ProductModelId = 6,
                            ProductNumber = "FR-R92B-58",
                            Size = "58",
                            StandardCost = 1059.3100m,
                            Weight = 1016.04m
                        },
                        new
                        {
                            ProductId = new Guid("d060e823-0fe4-41fc-81e1-a823182a513e"),
                            Color = "Red",
                            ListPrice = 1431.5000m,
                            Name = "HL Road Frame - Red, 58",
                            ProductCategoryId = "ROADFR",
                            ProductModelId = 6,
                            ProductNumber = "FR-R92R-58",
                            Size = "58",
                            StandardCost = 1059.3100m,
                            Weight = 1016.04m
                        },
                        new
                        {
                            ProductId = new Guid("b25a6a50-f7bd-45f0-af93-2da697eed822"),
                            Color = "Red",
                            ListPrice = 3578.2700m,
                            Name = "Road-150 Red, 62",
                            ProductCategoryId = "ROADB",
                            ProductModelId = 25,
                            ProductNumber = "BK-R93R-62",
                            Size = "62",
                            StandardCost = 2171.2942m,
                            Weight = 6803.85m
                        },
                        new
                        {
                            ProductId = new Guid("4bf7022b-b33e-41ca-82fe-3fd23a7db1ad"),
                            Color = "Black",
                            ListPrice = 782.9900m,
                            Name = "Road-650 Black, 58",
                            ProductCategoryId = "ROADB",
                            ProductModelId = 30,
                            ProductNumber = "BK-R50B-58",
                            Size = "58",
                            StandardCost = 486.7066m,
                            Weight = 8976.55m
                        },
                        new
                        {
                            ProductId = new Guid("3f19b196-de78-40ff-84f8-43e93e083dc5"),
                            Color = "Silver",
                            ListPrice = 3399.9900m,
                            Name = "Mountain-100 Silver, 38",
                            ProductCategoryId = "MOUNTB",
                            ProductModelId = 19,
                            ProductNumber = "BK-M82S-38",
                            Size = "38",
                            StandardCost = 1912.1544m,
                            Weight = 9230.56m
                        },
                        new
                        {
                            ProductId = new Guid("82e9194d-ea3e-46e7-8c7d-144f12f3addc"),
                            Color = "Black",
                            ListPrice = 3374.9900m,
                            Name = "Mountain-100 Black, 38",
                            ProductCategoryId = "MOUNTB",
                            ProductModelId = 19,
                            ProductNumber = "BK-M82B-38",
                            Size = "38",
                            StandardCost = 1898.0944m,
                            Weight = 9230.56m
                        },
                        new
                        {
                            ProductId = new Guid("5a684535-7e87-4d89-9662-61e17dc0580b"),
                            Color = "Silver",
                            ListPrice = 2319.9900m,
                            Name = "Mountain-200 Silver, 38",
                            ProductCategoryId = "MOUNTB",
                            ProductModelId = 20,
                            ProductNumber = "BK-M68S-38",
                            Size = "38",
                            StandardCost = 1265.6195m,
                            Weight = 10591.33m
                        },
                        new
                        {
                            ProductId = new Guid("bc148123-c7d1-4a39-9710-e4e9802902b9"),
                            Color = "Black",
                            ListPrice = 2294.9900m,
                            Name = "Mountain-200 Black, 38",
                            ProductCategoryId = "MOUNTB",
                            ProductModelId = 20,
                            ProductNumber = "BK-M68B-38",
                            Size = "38",
                            StandardCost = 1251.9813m,
                            Weight = 10591.33m
                        },
                        new
                        {
                            ProductId = new Guid("1a783a33-2e55-4443-bd46-784fcd74e29c"),
                            Color = "Black",
                            ListPrice = 2294.9900m,
                            Name = "Mountain-200 Black, 42",
                            ProductCategoryId = "MOUNTB",
                            ProductModelId = 20,
                            ProductNumber = "BK-M68B-42",
                            Size = "42",
                            StandardCost = 1251.9813m,
                            Weight = 10781.83m
                        },
                        new
                        {
                            ProductId = new Guid("4ed503b7-9a33-4f5d-b04d-ff92a4e27ce2"),
                            Color = "Black",
                            ListPrice = 2294.9900m,
                            Name = "Mountain-200 Black, 46",
                            ProductCategoryId = "MOUNTB",
                            ProductModelId = 20,
                            ProductNumber = "BK-M68B-46",
                            Size = "46",
                            StandardCost = 1251.9813m,
                            Weight = 10945.13m
                        },
                        new
                        {
                            ProductId = new Guid("31946b9e-84ab-47f1-aa61-cd57c331b5cf"),
                            Color = "Black",
                            ListPrice = 1079.9900m,
                            Name = "Mountain-300 Black, 38",
                            ProductCategoryId = "MOUNTB",
                            ProductModelId = 21,
                            ProductNumber = "BK-M47B-38",
                            Size = "38",
                            StandardCost = 598.4354m,
                            Weight = 11498.51m
                        },
                        new
                        {
                            ProductId = new Guid("5f6fdd7b-d2ab-4557-9c4a-604ae994731f"),
                            ListPrice = 44.5400m,
                            Name = "LL Mountain Handlebars",
                            ProductCategoryId = "HANDLB",
                            ProductModelId = 52,
                            ProductNumber = "HB-M243",
                            StandardCost = 19.7758m
                        },
                        new
                        {
                            ProductId = new Guid("713f6ba4-cec9-4060-94fc-4bff058887dc"),
                            ListPrice = 61.9200m,
                            Name = "ML Mountain Handlebars",
                            ProductCategoryId = "HANDLB",
                            ProductModelId = 54,
                            ProductNumber = "HB-M763",
                            StandardCost = 27.4925m
                        },
                        new
                        {
                            ProductId = new Guid("b775a4de-c00e-4fa4-ba21-7cd084cfc382"),
                            ListPrice = 120.2700m,
                            Name = "HL Mountain Handlebars",
                            ProductCategoryId = "HANDLB",
                            ProductModelId = 55,
                            ProductNumber = "HB-M918",
                            StandardCost = 53.3999m
                        });
                });

            modelBuilder.Entity("Sample.Models.ProductCategory", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("ProductCategoryID");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 276, DateTimeKind.Local).AddTicks(9704));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductCategory_Name");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = "BIKES",
                            Name = "Bikes"
                        },
                        new
                        {
                            ProductCategoryId = "COMPT",
                            Name = "Components"
                        },
                        new
                        {
                            ProductCategoryId = "CLOTHE",
                            Name = "Clothing"
                        },
                        new
                        {
                            ProductCategoryId = "ACCESS",
                            Name = "Accessories"
                        },
                        new
                        {
                            ProductCategoryId = "MOUNTB",
                            Name = "Mountain Bikes"
                        },
                        new
                        {
                            ProductCategoryId = "ROADB",
                            Name = "Road Bikes"
                        },
                        new
                        {
                            ProductCategoryId = "ROADFR",
                            Name = "Road Frames"
                        },
                        new
                        {
                            ProductCategoryId = "TOURB",
                            Name = "Touring Bikes"
                        },
                        new
                        {
                            ProductCategoryId = "HANDLB",
                            Name = "Handlebars"
                        },
                        new
                        {
                            ProductCategoryId = "BRACK",
                            Name = "Bottom Brackets"
                        },
                        new
                        {
                            ProductCategoryId = "BRAKES",
                            Name = "Brakes"
                        });
                });

            modelBuilder.Entity("Sample.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductModelId"), 1L, 1);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 277, DateTimeKind.Local).AddTicks(978));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductModel_Name");

                    b.ToTable("ProductModel");

                    b.HasData(
                        new
                        {
                            ProductModelId = 6,
                            Name = "HL Road Frame"
                        },
                        new
                        {
                            ProductModelId = 19,
                            CatalogDescription = "\n                        <?xml-stylesheet href=\"ProductDescription.xsl\" type=\"text/xsl\"?><p1:ProductDescription xmlns:p1=\"http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription\" xmlns:wm=\"http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain\" xmlns:wf=\"http://www.adventure-works.com/schemas/OtherFeatures\" xmlns:html=\"http://www.w3.org/1999/xhtml\" ProductModelID=\"19\" ProductModelName=\"Mountain 100\"><p1:Summary><html:p>Our top-of-the-line competition mountain bike. \n                        Performance-enhancing options include the innovative HL Frame,\n                        super-smooth front suspension, and traction for all terrain.\n                        </html:p></p1:Summary><p1:Manufacturer><p1:Name>AdventureWorks</p1:Name><p1:Copyright>2002</p1:Copyright><p1:ProductURL>HTTP://www.Adventure-works.com</p1:ProductURL></p1:Manufacturer><p1:Features>These are the product highlights. \n                        <wm:Warranty><wm:WarrantyPeriod>3 years</wm:WarrantyPeriod><wm:Description>parts and labor</wm:Description></wm:Warranty><wm:Maintenance><wm:NoOfYears>10 years</wm:NoOfYears><wm:Description>maintenance contract available through your dealer or any AdventureWorks retail store.</wm:Description></wm:Maintenance><wf:wheel>High performance wheels.</wf:wheel><wf:saddle><html:i>Anatomic design</html:i> and made from durable leather for a full-day of riding in comfort.</wf:saddle><wf:pedal><html:b>Top-of-the-line</html:b> clipless pedals with adjustable tension.</wf:pedal><wf:BikeFrame>Each frame is hand-crafted in our Bothell facility to the optimum diameter\n                        and wall-thickness required of a premium mountain frame.\n                        The heat-treated welded aluminum frame has a larger diameter tube that absorbs the bumps.</wf:BikeFrame><wf:crankset> Triple crankset; alumunim crank arm; flawless shifting. </wf:crankset></p1:Features><!-- add one or more of these elements...one for each specific product in this product model --><p1:Picture><p1:Angle>front</p1:Angle><p1:Size>small</p1:Size><p1:ProductPhotoID>118</p1:ProductPhotoID></p1:Picture><!-- add any tags in <specifications> --><p1:Specifications> These are the product specifications.\n                        <Material>Almuminum Alloy</Material><Color>Available in most colors</Color><ProductLine>Mountain bike</ProductLine><Style>Unisex</Style><RiderExperience>Advanced to Professional riders</RiderExperience></p1:Specifications></p1:ProductDescription>\n                ",
                            Name = "Mountain-100"
                        },
                        new
                        {
                            ProductModelId = 20,
                            Name = "Mountain-200"
                        },
                        new
                        {
                            ProductModelId = 21,
                            Name = "Mountain-300"
                        },
                        new
                        {
                            ProductModelId = 25,
                            CatalogDescription = "\n                        <?xml-stylesheet href=\"ProductDescription.xsl\" type=\"text/xsl\"?><p1:ProductDescription xmlns:p1=\"http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription\" xmlns:wm=\"http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain\" xmlns:wf=\"http://www.adventure-works.com/schemas/OtherFeatures\" xmlns:html=\"http://www.w3.org/1999/xhtml\" ProductModelID=\"25\" ProductModelName=\"Road-150\"><p1:Summary><html:p>This bike is ridden by race winners. Developed with the \n                        Adventure Works Cycles professional race team, it has a extremely light\n                        heat-treated aluminum frame, and steering that allows precision control.\n                        </html:p></p1:Summary><p1:Manufacturer><p1:Name>AdventureWorks</p1:Name><p1:Copyright>2002</p1:Copyright><p1:ProductURL>HTTP://www.Adventure-works.com</p1:ProductURL></p1:Manufacturer><p1:Features>These are the product highlights. \n                        <wm:Warranty><wm:WarrantyPeriod>4 years</wm:WarrantyPeriod><wm:Description>parts and labor</wm:Description></wm:Warranty><wm:Maintenance><wm:NoOfYears>7 years</wm:NoOfYears><wm:Description>maintenance contact available through dealer or any Adventure Works Cycles retail store.</wm:Description></wm:Maintenance><wf:handlebar>Designed for racers; high-end anatomically shaped bar from aluminum alloy.</wf:handlebar><wf:wheel>Strong wheels with double-walled rims.</wf:wheel><wf:saddle><html:i>Lightweight</html:i> kevlar racing saddle.</wf:saddle><wf:pedal><html:b>Top-of-the-line</html:b> clipless pedals with adjustable tension.</wf:pedal><wf:BikeFrame><html:i>Our lightest and best quality</html:i> aluminum frame made from the newest alloy;\n                        it is welded and heat-treated for strength.\n                        Our innovative design results in maximum comfort and performance.</wf:BikeFrame></p1:Features><!-- add one or more of these elements...one for each specific product in this product model --><p1:Picture><p1:Angle>front</p1:Angle><p1:Size>small</p1:Size><p1:ProductPhotoID>126</p1:ProductPhotoID></p1:Picture><!-- add any tags in <specifications> --><p1:Specifications> These are the product specifications.\n                        <Material>Aluminum</Material><Color>Available in all colors.</Color><ProductLine>Road bike</ProductLine><Style>Unisex</Style><RiderExperience>Intermediate to Professional riders</RiderExperience></p1:Specifications></p1:ProductDescription>\n                ",
                            Name = "Road-150"
                        },
                        new
                        {
                            ProductModelId = 30,
                            Name = "Road-650"
                        },
                        new
                        {
                            ProductModelId = 52,
                            Name = "LL Mountain Handlebars"
                        },
                        new
                        {
                            ProductModelId = 54,
                            Name = "ML Mountain Handlebars"
                        },
                        new
                        {
                            ProductModelId = 55,
                            Name = "HL Mountain Handlebars"
                        });
                });

            modelBuilder.Entity("Sample.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderDetailId"), 1L, 1);

                    b.Property<decimal?>("LineTotal")
                        .HasColumnType("numeric(38,6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 277, DateTimeKind.Local).AddTicks(2348));

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money");

                    b.HasKey("SalesOrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderDetail");

                    b.HasData(
                        new
                        {
                            SalesOrderDetailId = 110562,
                            OrderQty = (short)1,
                            ProductId = new Guid("b25a6a50-f7bd-45f0-af93-2da697eed822"),
                            SalesOrderId = 1000,
                            UnitPrice = 3578.2700m,
                            UnitPriceDiscount = 0m
                        },
                        new
                        {
                            SalesOrderDetailId = 110563,
                            OrderQty = (short)2,
                            ProductId = new Guid("5f6fdd7b-d2ab-4557-9c4a-604ae994731f"),
                            SalesOrderId = 1000,
                            UnitPrice = 44.5400m,
                            UnitPriceDiscount = 0m
                        },
                        new
                        {
                            SalesOrderDetailId = 110564,
                            OrderQty = (short)2,
                            ProductId = new Guid("d060e823-0fe4-41fc-81e1-a823182a513e"),
                            SalesOrderId = 1000,
                            UnitPrice = 1431.5000m,
                            UnitPriceDiscount = 0m
                        });
                });

            modelBuilder.Entity("Sample.Models.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("AccountNumber");

                    b.Property<int?>("BillToAddressId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 12, 5, 22, 10, 11, 277, DateTimeKind.Local).AddTicks(7540));

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValueSql("(('SO-XXXX'))");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ShipToAddressId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipToAddressId");

                    b.ToTable("SalesOrderHeader");

                    b.HasData(
                        new
                        {
                            SalesOrderId = 1000,
                            AccountNumber = "10-4020-000609",
                            BillToAddressId = 5,
                            CustomerId = new Guid("737e9052-54f5-464e-9f2e-f27ca5122ecf"),
                            Freight = 22.0087m,
                            OnlineOrderFlag = true,
                            PurchaseOrderNumber = "PO348186287",
                            RevisionNumber = (byte)1,
                            SalesOrderNumber = "SO-1000",
                            ShipMethod = "CAR TRANSPORTATION",
                            ShipToAddressId = 4,
                            Status = (byte)5,
                            SubTotal = 6530.35m,
                            TaxAmt = 70.4279m,
                            TotalDue = 6622.7866m
                        });
                });

            modelBuilder.Entity("Sample.Models.CustomerAddress", b =>
                {
                    b.HasOne("Sample.Models.Address", "Address")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AddressId")
                        .IsRequired();

                    b.HasOne("Sample.Models.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Sample.Models.Product", b =>
                {
                    b.HasOne("Sample.Models.ProductCategory", "ProductCategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sample.Models.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("Sample.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("Sample.Models.Product", "Product")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("Sample.Models.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("Sample.Models.SalesOrderHeader", b =>
                {
                    b.HasOne("Sample.Models.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderHeader_Address_BillTo_AddressID");

                    b.HasOne("Sample.Models.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sample.Models.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrderHeader_Address_ShipTo_AddressID");

                    b.Navigation("BillToAddress");

                    b.Navigation("Customer");

                    b.Navigation("ShipToAddress");
                });

            modelBuilder.Entity("Sample.Models.Address", b =>
                {
                    b.Navigation("CustomerAddress");

                    b.Navigation("SalesOrderHeaderBillToAddress");

                    b.Navigation("SalesOrderHeaderShipToAddress");
                });

            modelBuilder.Entity("Sample.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddress");

                    b.Navigation("SalesOrderHeader");
                });

            modelBuilder.Entity("Sample.Models.Product", b =>
                {
                    b.Navigation("SalesOrderDetail");
                });

            modelBuilder.Entity("Sample.Models.ProductCategory", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sample.Models.ProductModel", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sample.Models.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
