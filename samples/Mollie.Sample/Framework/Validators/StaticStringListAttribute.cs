using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;

namespace Mollie.Sample.Framework.Validators
{
    /// <summary>
    /// Class StaticStringListAttribute.
    /// Implements the <see cref="System.ComponentModel.DataAnnotations.ValidationAttribute" />
    /// </summary>
    /// <seealso cref="System.ComponentModel.DataAnnotations.ValidationAttribute" />
    /// <autogeneratedoc />
    public class StaticStringListAttribute : ValidationAttribute {
        /// <summary>
        /// The static class
        /// </summary>
        /// <autogeneratedoc />
        private readonly Type _staticClass;

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticStringListAttribute"/> class.
        /// </summary>
        /// <param name="staticClass">The static class.</param>
        /// <autogeneratedoc />
        public StaticStringListAttribute(Type staticClass) {
            _staticClass = staticClass;
        }

        /// <summary>
        /// Returns true if ... is valid.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="validationContext">The validation context.</param>
        /// <returns>ValidationResult.</returns>
        /// <autogeneratedoc />
        protected override ValidationResult IsValid(object value, ValidationContext validationContext) {
            var validValues = _staticClass
                .GetFields(BindingFlags.Static | BindingFlags.Public)
                .Select(x => x.GetValue(null).ToString());

            if (validValues.Contains(value)) {
                return ValidationResult.Success;
            }
            
            return new ValidationResult($"The value \"{value}\" is invalid");
        }
    }
}
