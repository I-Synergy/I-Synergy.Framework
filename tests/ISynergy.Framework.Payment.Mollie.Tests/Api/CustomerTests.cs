using System;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using ISynergy.Framework.Payment.Mollie.Exceptions;
using ISynergy.Framework.Payment.Mollie.Models.Customer;
using ISynergy.Framework.Payment.Mollie.Models.Payment;
using Xunit;

namespace ISynergy.Framework.Payment.Mollie.Tests.Api
{
    /// <summary>
    /// Class CustomerTests.
    /// Implements the <see cref="BaseApiTestFixture" />
    /// </summary>
    /// <seealso cref="BaseApiTestFixture" />
    /// <autogeneratedoc />
    public class CustomerTests : BaseApiTestFixture
    {
        /// <summary>
        /// Defines the test method CanRetrieveCustomerList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrieveCustomerList() {
            // When: Retrieve customer list with default settings
            var response = await CustomerClient.GetCustomerListAsync();

            // Then
            Assert.NotNull(response);
            Assert.NotNull(response.Items);
        }

        /// <summary>
        /// Defines the test method ListCustomersNeverReturnsMoreCustomersThenTheNumberOfRequestedCustomers.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task ListCustomersNeverReturnsMoreCustomersThenTheNumberOfRequestedCustomers() {
            // If: Number of customers requested is 5
            var numberOfCustomers = 5;

            // When: Retrieve 5 customers
            var response = await CustomerClient.GetCustomerListAsync(null, numberOfCustomers);

            // Then
            Assert.True(response.Items.Count <= numberOfCustomers);
        }

        /// <summary>
        /// Defines the test method CanCreateNewCustomer.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanCreateNewCustomer() {
            // If: We create a customer request with only the required parameters
            var name = "Smit";
            var email = "johnsmit@mollie.com";

            // When: We send the customer request to Mollie
            var result = await CreateCustomer(name, email);

            // Then: Make sure the requested parameters match the response parameter values
            Assert.NotNull(result);
            Assert.Equal(name, result.Name);
            Assert.Equal(email, result.Email);
        }

        /// <summary>
        /// Defines the test method CanUpdateCustomer.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanUpdateCustomer() {
            // If: We retrieve the customer list
            var response = await CustomerClient.GetCustomerListAsync();
            
            if (response.Items.Count == 0) {
                Assert.Empty(response.Items);  //No customers found. Unable to test deleting customers
                return;
            }

            // When: We update one of the customers in the list
            var customerIdToUpdate = response.Items.First().Id;
            var newCustomerName = DateTime.Now.ToShortTimeString();
            
            var updateParameters = new CustomerRequest() {
                Name = newCustomerName
            };
            
            var result = await CustomerClient.UpdateCustomerAsync(customerIdToUpdate, updateParameters);

            // Then: Make sure the new name is updated
            Assert.NotNull(result);
            Assert.Equal(newCustomerName, result.Name);
        }

        /// <summary>
        /// Defines the test method CanDeleteCustomer.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanDeleteCustomer() {
            // If: We retrieve the customer list
            var response = await CustomerClient.GetCustomerListAsync();

            if (response.Items.Count == 0) {
                Assert.Empty(response.Items);  //No customers found. Unable to test deleting customers
                return;
            }

            // When: We delete one of the customers in the list
            var customerIdToDelete = response.Items.First().Id;
            await CustomerClient.DeleteCustomerAsync(customerIdToDelete);

            // Then: Make sure its deleted
            var mollieApiException = await Assert.ThrowsAsync<MollieApiException>(() => CustomerClient.GetCustomerAsync(customerIdToDelete));
            Assert.Equal((int)HttpStatusCode.Gone, mollieApiException.Details.Status);
        }

        /// <summary>
        /// Defines the test method CanGetCustomerByUrlObject.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanGetCustomerByUrlObject() {
            // If: We create a customer request with only the required parameters
            var name = "Smit";
            var email = "johnsmit@mollie.com";
            var createdCustomer = await CreateCustomer(name, email);

            // When: We try to retrieve the customer by Url object
            var retrievedCustomer = await CustomerClient.GetCustomerAsync(createdCustomer.Links.Self);

            // Then: Make sure it's retrieved
            Assert.Equal(createdCustomer.Name, retrievedCustomer.Name);
            Assert.Equal(createdCustomer.Email, retrievedCustomer.Email);
        }

        /// <summary>
        /// Defines the test method CanCreateCustomerWithJsonMetadata.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanCreateCustomerWithJsonMetadata() {
            // If: We create a customer request with json metadata
            var customerRequest = new CustomerRequest() {
                Email =  "johnsmit@mollie.com",
                Name = "Smit",
                Metadata =  "{\"order_id\":\"4.40\"}",
                Locale = Locale.nl_NL
            };

            // When: We try to retrieve the customer by Url object
            var retrievedCustomer = await CustomerClient.CreateCustomerAsync(customerRequest);

            // Then: Make sure it's retrieved
            Assert.Equal(customerRequest.Metadata, retrievedCustomer.Metadata);
        }

        /// <summary>
        /// Defines the test method CanCreateCustomerWithStringMetadata.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanCreateCustomerWithStringMetadata() {
            // If: We create a customer request with string metadata
            var customerRequest = new CustomerRequest() {
                Email = "johnsmit@mollie.com",
                Name = "Smit",
                Metadata = "This is my metadata",
                Locale = Locale.nl_NL
            };

            // When: We try to retrieve the customer by Url object
            var retrievedCustomer = await CustomerClient.CreateCustomerAsync(customerRequest);

            // Then: Make sure it's retrieved
            Assert.Equal(customerRequest.Metadata, retrievedCustomer.Metadata);
        }

        /// <summary>
        /// Creates the customer.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="email">The email.</param>
        /// <returns>CustomerResponse.</returns>
        /// <autogeneratedoc />
        private async Task<CustomerResponse> CreateCustomer(string name, string email) {
            var customerRequest = new CustomerRequest() {
                Email = email,
                Name = name,
                Locale = Locale.nl_NL
            };

            return await CustomerClient.CreateCustomerAsync(customerRequest);
        }
    }
}
