using System.Threading.Tasks;
using ISynergy.Framework.Payment.Mollie.Exceptions;
using ISynergy.Framework.Payment.Mollie.Models;
using ISynergy.Framework.Payment.Mollie.Models.Payment.Request;
using Xunit;

namespace ISynergy.Framework.Payment.Mollie.Tests.Api
{
    /// <summary>
    /// Class ApiExceptionTests.
    /// Implements the <see cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// </summary>
    /// <seealso cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// <autogeneratedoc />
    public class ApiExceptionTests : BaseApiTestFixture
    {
        /// <summary>
        /// Defines the test method ShouldThrowMollieApiExceptionWhenInvalidParametersAreGiven.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task ShouldThrowMollieApiExceptionWhenInvalidParametersAreGiven()
        {
            // If: we create a payment request with invalid parameters
            var paymentRequest = new PaymentRequest()
            {
                Amount = new Amount(Currency.EUR, "100.00"),
                Description = null,
                RedirectUrl = null
            };

            // Then: Send the payment request to the Mollie Api, this should throw a mollie api exception
            var mollieApiException = await Assert.ThrowsAsync<MollieApiException>(() => PaymentClient.CreatePaymentAsync(paymentRequest));

            //var mollieApiException = aggregateException.FirstOrDefault(x => x.GetType() == typeof(MollieApiException)) as MollieApiException;
            Assert.NotNull(mollieApiException);
            Assert.NotNull(mollieApiException.Details);
            Assert.True(!string.IsNullOrEmpty(mollieApiException.Details.Detail));
        }
    }
}
