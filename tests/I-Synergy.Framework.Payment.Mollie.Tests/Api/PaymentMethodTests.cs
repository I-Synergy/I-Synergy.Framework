using System.Linq;
using System.Threading.Tasks;
using ISynergy.Framework.Payment.Mollie.Enumerations;
using Xunit;

namespace ISynergy.Framework.Payment.Mollie.Tests.Api
{
    /// <summary>
    /// Class PaymentMethodTests.
    /// Implements the <see cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// </summary>
    /// <seealso cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// <autogeneratedoc />
    public class PaymentMethodTests : BaseApiTestFixture
    {

        /// <summary>
        /// Defines the test method CanRetrievePaymentMethodList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrievePaymentMethodList() {
            // When: Retrieve payment list with default settings
            var response = await PaymentMethodClient.GetPaymentMethodListAsync();

            // Then: Make sure it can be retrieved
            Assert.NotNull(response);
            Assert.NotNull(response.Items);
        }

        /// <summary>
        /// Defines the test method CanRetrieveSinglePaymentMethod.
        /// </summary>
        /// <param name="method">The method.</param>
        /// <autogeneratedoc />
        [Theory(Skip= "Outcome depends on payment methods active in portal")]
        [InlineData(PaymentMethods.Ideal)]
        [InlineData(PaymentMethods.CreditCard)]
        [InlineData(PaymentMethods.Bancontact)]
        [InlineData(PaymentMethods.Sofort)]
        [InlineData(PaymentMethods.BankTransfer)]
        [InlineData(PaymentMethods.Belfius)]
        [InlineData(PaymentMethods.Bitcoin)]
        [InlineData(PaymentMethods.PayPal)]
        [InlineData(PaymentMethods.Kbc)]
        public async Task CanRetrieveSinglePaymentMethod(PaymentMethods method) {
            // When: retrieving a payment method
            var paymentMethod = await PaymentMethodClient.GetPaymentMethodAsync(method);

            // Then: Make sure it can be retrieved
            Assert.NotNull(paymentMethod);
            Assert.Equal(method, paymentMethod.Id);
        }

        /// <summary>
        /// Defines the test method CanRetrieveIdealIssuers.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrieveIdealIssuers() {
            // When: retrieving the ideal method we can include the issuers
            var paymentMethod = await PaymentMethodClient.GetPaymentMethodAsync(PaymentMethods.Ideal, true);

            // Then: We should have one or multiple issuers
            Assert.NotNull(paymentMethod);
            Assert.True(paymentMethod.Issuers.Any());
        }

        /// <summary>
        /// Defines the test method DoNotRetrieveIssuersWhenIncludeIsFalse.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task DoNotRetrieveIssuersWhenIncludeIsFalse() {
            // When: retrieving the ideal method with the include parameter set to false
            var paymentMethod = await PaymentMethodClient.GetPaymentMethodAsync(PaymentMethods.Ideal, false);

            // Then: Issuers should not be included
            Assert.Null(paymentMethod.Issuers);
        }

        /// <summary>
        /// Defines the test method DoNotRetrieveIssuersWhenIncludeIsNull.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task DoNotRetrieveIssuersWhenIncludeIsNull() {
            // When: retrieving the ideal method with the include parameter set to null
            var paymentMethod = await PaymentMethodClient.GetPaymentMethodAsync(PaymentMethods.Ideal, null);

            // Then: Issuers should not be included
            Assert.Null(paymentMethod.Issuers);
        }

        /// <summary>
        /// Defines the test method CanRetrievePricing.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrievePricing() {
            // When: retrieving the ideal method we can include the issuers
            var paymentMethod = await PaymentMethodClient.GetPaymentMethodAsync(PaymentMethods.Ideal, includePricing: true);

            // Then: We should have one or multiple issuers
            Assert.NotNull(paymentMethod);
            Assert.True(paymentMethod.Pricing.Any());
        }

        /// <summary>
        /// Defines the test method DoNotRetrievePricingWhenIncludeIsFalse.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task DoNotRetrievePricingWhenIncludeIsFalse() {
            // When: retrieving the ideal method with the include parameter set to false
            var paymentMethod = await PaymentMethodClient.GetPaymentMethodAsync(PaymentMethods.Ideal, includePricing: false);

            // Then: Issuers should not be included
            Assert.Null(paymentMethod.Pricing);
        }

        /// <summary>
        /// Defines the test method DoNotRetrievePricingWhenIncludeIsNull.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task DoNotRetrievePricingWhenIncludeIsNull() {
            // When: retrieving the ideal method with the include parameter set to null
            var paymentMethod = await PaymentMethodClient.GetPaymentMethodAsync(PaymentMethods.Ideal, includePricing: null);

            // Then: Issuers should not be included
            Assert.Null(paymentMethod.Pricing);
        }

        /// <summary>
        /// Defines the test method CanRetrieveAllMethods.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrieveAllMethods() {
            // When: retrieving the all mollie payment methods
            var paymentMethods = await PaymentMethodClient.GetAllPaymentMethodListAsync();

            // Then: We should have multiple issuers
            Assert.NotNull(paymentMethods);
            Assert.True(paymentMethods.Items.Any());
        }

        /// <summary>
        /// Defines the test method CanRetrievePricingForAllMethods.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrievePricingForAllMethods() {
            // When: retrieving the ideal method we can include the issuers
            var paymentMethods = await PaymentMethodClient.GetAllPaymentMethodListAsync(includePricing: true);

            // Then: We should have prices available
            Assert.Contains(paymentMethods.Items, x => x.Pricing != null && x.Pricing.Any(y => y.Fixed.Value > 0));
        }

        /// <summary>
        /// Defines the test method CanRetrieveIssuersForAllMethods.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrieveIssuersForAllMethods() {
            // When: retrieving the all mollie payment methods we can include the issuers
            var paymentMethods = await PaymentMethodClient.GetAllPaymentMethodListAsync(includeIssuers: true);

            // Then: We should have one or multiple issuers
            Assert.Contains(paymentMethods.Items, x => x.Issuers != null);
        }

        /// <summary>
        /// Defines the test method CanRetrieveIssuersAndPricingInformation.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrieveIssuersAndPricingInformation() {
            // When: retrieving the all mollie payment methods we can include the issuers
            var paymentMethods = await PaymentMethodClient.GetAllPaymentMethodListAsync(includeIssuers: true, includePricing: true);
            
            // Then: We should have one or multiple issuers
            Assert.Contains(paymentMethods.Items, x => x.Issuers != null);
            Assert.Contains(paymentMethods.Items, x => x.Pricing != null && x.Pricing.Any(y => y.Fixed.Value > 0));
        }
    }
}
