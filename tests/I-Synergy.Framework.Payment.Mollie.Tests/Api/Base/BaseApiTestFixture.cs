using ISynergy.Framework.Payment.Mollie.Abstractions.Clients;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using ISynergy.Framework.Payment.Mollie.Base;
using ISynergy.Framework.Payment.Mollie.Extensions;
using ISynergy.Framework.Payment.Mollie.Options;
using ISynergy.Framework.Payment.Mollie.Clients;

namespace ISynergy.Framework.Payment.Mollie.Tests.Api
{
    /// <summary>
    /// Class BaseApiTestFixture.
    /// Implements the <see cref="System.IDisposable" />
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    /// <autogeneratedoc />
    public class BaseApiTestFixture : IDisposable
    {
        /// <summary>
        /// The default redirect URL
        /// </summary>
        /// <autogeneratedoc />
        public readonly string DefaultRedirectUrl = "https://www.i-synergy.nl";
        /// <summary>
        /// The default webhook URL
        /// </summary>
        /// <autogeneratedoc />
        public readonly string DefaultWebhookUrl = "https://www.i-synergy.nl/webhook";

        /// <summary>
        /// Gets the service provider.
        /// </summary>
        /// <value>The service provider.</value>
        /// <autogeneratedoc />
        public IServiceProvider ServiceProvider { get; }
        /// <summary>
        /// Gets the configuration.
        /// </summary>
        /// <value>The configuration.</value>
        /// <autogeneratedoc />
        public IConfiguration Configuration { get; }
        /// <summary>
        /// Gets the client service.
        /// </summary>
        /// <value>The client service.</value>
        /// <autogeneratedoc />
        public IMollieClientService ClientService { get; }

        /// <summary>
        /// The payment client
        /// </summary>
        /// <autogeneratedoc />
        public readonly IPaymentClient PaymentClient;
        /// <summary>
        /// The payment method client
        /// </summary>
        /// <autogeneratedoc />
        public readonly IPaymentMethodClient PaymentMethodClient;
        /// <summary>
        /// The refund client
        /// </summary>
        /// <autogeneratedoc />
        public readonly IRefundClient RefundClient;
        /// <summary>
        /// The subscription client
        /// </summary>
        /// <autogeneratedoc />
        public readonly ISubscriptionClient SubscriptionClient;
        /// <summary>
        /// The mandate client
        /// </summary>
        /// <autogeneratedoc />
        public readonly IMandateClient MandateClient;
        /// <summary>
        /// The customer client
        /// </summary>
        /// <autogeneratedoc />
        public readonly ICustomerClient CustomerClient;
        /// <summary>
        /// The profile client
        /// </summary>
        /// <autogeneratedoc />
        public readonly IProfileClient ProfileClient;
        /// <summary>
        /// The order client
        /// </summary>
        /// <autogeneratedoc />
        public readonly IOrderClient OrderClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseApiTestFixture"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public BaseApiTestFixture()
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

            Configuration = builder.Build();

            var services = new ServiceCollection();

            services.Configure<MollieApiOptions>(Configuration.GetSection(nameof(MollieApiOptions)));

            var appSettings = new MollieApiOptions();
            Configuration.GetSection(nameof(MollieApiOptions)).Bind(appSettings);

            services.AddPaymentGatewayMollie();

            // Register all available forms
            services.AddTransient<PaymentClient>();
            services.AddTransient<PaymentMethodClient>();
            services.AddTransient<RefundClient>();
            services.AddTransient<SubscriptionClient>();
            services.AddTransient<MandateClient>();
            services.AddTransient<CustomerClient>();
            services.AddTransient<CustomerClient>();
            services.AddTransient<ProfileClient>();
            services.AddTransient<OrderClient>();

            ServiceProvider = services.BuildServiceProvider();

            ClientService = ServiceProvider.GetRequiredService<IMollieClientService>();
            PaymentClient = ServiceProvider.GetRequiredService<PaymentClient>();
            PaymentMethodClient = ServiceProvider.GetRequiredService<PaymentMethodClient>();
            RefundClient = ServiceProvider.GetRequiredService<RefundClient>();
            SubscriptionClient = ServiceProvider.GetRequiredService<SubscriptionClient>();
            MandateClient = ServiceProvider.GetRequiredService<MandateClient>();
            CustomerClient = ServiceProvider.GetRequiredService<CustomerClient>();
            CustomerClient = ServiceProvider.GetRequiredService<CustomerClient>();
            ProfileClient = ServiceProvider.GetRequiredService<ProfileClient>();
            OrderClient = ServiceProvider.GetRequiredService<OrderClient>();

            EnsureTestApiKey(appSettings);
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        /// <autogeneratedoc />
        public void Dispose()
        {
        }

        /// <summary>
        /// Ensures the test API key.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <exception cref="ArgumentException">Please enter you API key in the BaseMollieApiTestClass class</exception>
        /// <exception cref="ArgumentException">You should not run these tests on your live key!</exception>
        /// <autogeneratedoc />
        private void EnsureTestApiKey(MollieApiOptions options)
        {
            if (string.IsNullOrEmpty(options.ApiKey))
            {
                throw new ArgumentException("Please enter you API key in the BaseMollieApiTestClass class");
            }

            if (!options.ApiKey.StartsWith("test"))
            {
                throw new ArgumentException("You should not run these tests on your live key!");
            }
        }
    }
}
