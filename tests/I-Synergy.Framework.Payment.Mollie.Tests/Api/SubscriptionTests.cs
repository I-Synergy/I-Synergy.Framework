using System;
using System.Linq;
using System.Threading.Tasks;
using ISynergy.Framework.Payment.Mollie.Enumerations;
using ISynergy.Framework.Payment.Mollie.Models;
using ISynergy.Framework.Payment.Mollie.Models.Subscription;
using Xunit;

namespace ISynergy.Framework.Payment.Mollie.Tests.Api
{
    /// <summary>
    /// Class SubscriptionTests.
    /// Implements the <see cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// </summary>
    /// <seealso cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// <autogeneratedoc />
    public class SubscriptionTests : BaseApiTestFixture
    {
        /// <summary>
        /// Defines the test method CanRetrieveSubscriptionList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrieveSubscriptionList() {
            // Given
            var customerId = await GetFirstCustomerWithValidMandate();

            // When: Retrieve subscription list with default settings
            var response = await SubscriptionClient.GetSubscriptionListAsync(customerId);

            // Then
            Assert.NotNull(response);
            Assert.NotNull(response.Items);
        }

        /// <summary>
        /// Defines the test method ListSubscriptionsNeverReturnsMoreCustomersThenTheNumberOfRequestedSubscriptions.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task ListSubscriptionsNeverReturnsMoreCustomersThenTheNumberOfRequestedSubscriptions() {
            // Given: Number of customers requested is 5
            var customerId = await GetFirstCustomerWithValidMandate();
            var numberOfSubscriptions = 5;

            // When: Retrieve 5 subscriptions
            var response = await SubscriptionClient.GetSubscriptionListAsync(customerId, null, numberOfSubscriptions);

            // Then
            Assert.True(response.Items.Count <= numberOfSubscriptions);
        }

        /// <summary>
        /// Defines the test method CanCreateSubscription.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanCreateSubscription() {
            // Given
            var customerId = await GetFirstCustomerWithValidMandate();
            var subscriptionRequest = new SubscriptionRequest
            {
                Amount = new Amount(Currency.EUR, "100.00"),
                Times = 5,
                Interval = "1 month",
                Description = $"Subscription {Guid.NewGuid()}", // Subscriptions must have a unique name
                WebhookUrl = "http://www.google.nl",
                StartDate = DateTime.Now.AddDays(1)
            };

            // When
            var subscriptionResponse = await SubscriptionClient.CreateSubscriptionAsync(customerId, subscriptionRequest);

            // Then
            Assert.Equal(subscriptionRequest.Amount.Value, subscriptionResponse.Amount.Value);
            Assert.Equal(subscriptionRequest.Amount.Currency, subscriptionResponse.Amount.Currency);
            Assert.Equal(subscriptionRequest.Times, subscriptionResponse.Times);
            Assert.Equal(subscriptionRequest.Interval, subscriptionResponse.Interval);
            Assert.Equal(subscriptionRequest.Description, subscriptionResponse.Description);
            Assert.Equal(subscriptionRequest.WebhookUrl, subscriptionResponse.WebhookUrl);
            Assert.Equal(subscriptionRequest.StartDate.Value.Date, subscriptionResponse.StartDate);
        }

        /// <summary>
        /// Defines the test method CanCancelSubscription.
        /// </summary>
        /// <autogeneratedoc />
        [Fact(Skip = "We can only test this in debug mode, because we actually have to use the Subscription")]
        public async Task CanCancelSubscription() {
            // Given
            var customerId = await GetFirstCustomerWithValidMandate();
            var subscriptions = await SubscriptionClient.GetSubscriptionListAsync(customerId);

            // When
            if (subscriptions.Count > 0) {
                var subscriptionId = subscriptions.Items.First().Id;
                await SubscriptionClient.CancelSubscriptionAsync(customerId, subscriptionId);
                var cancelledSubscription = await SubscriptionClient.GetSubscriptionAsync(customerId, subscriptionId);

                // Then
                Assert.Equal(SubscriptionStatus.Canceled, cancelledSubscription.Status);
            }
            else {
                Assert.Empty(subscriptions.Items); //No subscriptions found that could be cancelled
            }
        }

        /// <summary>
        /// Defines the test method CanUpdateSubscription.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanUpdateSubscription() {
            // Given 
            var customerId = await GetFirstCustomerWithValidMandate();
            var subscriptions = await SubscriptionClient.GetSubscriptionListAsync(customerId);

            // When
            if (subscriptions.Count > 0)
            {
                var subscriptionId = subscriptions.Items.First().Id;
                var request = new SubscriptionUpdateRequest()
                {
                    Description = $"Updated subscription {Guid.NewGuid()}"
                };
                var response = await SubscriptionClient.UpdateSubscriptionAsync(customerId, subscriptionId, request);

                // Then
                Assert.Equal(request.Description, response.Description);
            }
            else {
                Assert.Empty(subscriptions.Items); //No subscriptions found that could be cancelled
            }
        }

        /// <summary>
        /// Defines the test method CanCreateSubscriptionWithMetaData.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanCreateSubscriptionWithMetaData() {
            // If: We create a subscription with meta data
            var json = "{\"order_id\":\"4.40\"}";
            var customerId = await GetFirstCustomerWithValidMandate();
            var subscriptionRequest = new SubscriptionRequest
            {
                Amount = new Amount(Currency.EUR, "100.00"),
                Times = 5,
                Interval = "1 month",
                Description = $"Subscription {Guid.NewGuid()}", // Subscriptions must have a unique name
                WebhookUrl = "http://www.google.nl",
                StartDate = DateTime.Now.AddDays(1),
                Metadata = json
            };

            // When We send the subscription request to Mollie
            var result = await SubscriptionClient.CreateSubscriptionAsync(customerId, subscriptionRequest);

            // Then: Make sure we get the same json result as metadata
            Assert.Equal(json, result.Metadata);
        }

        /// <summary>
        /// Gets the first customer with valid mandate.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        public async Task<string> GetFirstCustomerWithValidMandate() {
            var customers = await CustomerClient.GetCustomerListAsync();
            
            foreach (var customer in customers.Items) {
                var mandates = await MandateClient.GetMandateListAsync(customer.Id);
                if (mandates.Items.Any(x => x.Status == MandateStatus.Valid)) {
                    return customer.Id;
                }
            }

            Assert.Empty(customers.Items); //No customers with valid mandate found. Unable to test subscription API
            return null;
        }
    }
}
