using System.Linq;
using System.Threading.Tasks;
using ISynergy.Framework.Payment.Mollie.Models.Mandate;
using Xunit;

namespace ISynergy.Framework.Payment.Mollie.Tests.Api
{
    /// <summary>
    /// Class MandateTests.
    /// Implements the <see cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// </summary>
    /// <seealso cref="ISynergy.Framework.Payment.Mollie.Tests.Api.BaseApiTestFixture" />
    /// <autogeneratedoc />
    public class MandateTests : BaseApiTestFixture
    {
        /// <summary>
        /// Defines the test method CanRetrieveMandateList.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanRetrieveMandateList() {
            // We can only test this if there are customers
            var customers = await CustomerClient.GetCustomerListAsync();

            if (customers.Count > 0) {
                // When: Retrieve mandate list with default settings
                var response = await MandateClient.GetMandateListAsync(customers.Items.First().Id);

                // Then
                Assert.NotNull(response);
                Assert.NotNull(response.Items);
                return;
            }

            Assert.Empty(customers.Items);
        }

        /// <summary>
        /// Defines the test method ListMandatesNeverReturnsMoreCustomersThenTheNumberOfRequestedMandates.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task ListMandatesNeverReturnsMoreCustomersThenTheNumberOfRequestedMandates() {
            // We can only test this if there are customers
            var customers = await CustomerClient.GetCustomerListAsync();

            if (customers.Count > 0) {
                // If: Number of customers requested is 5
                var numberOfMandates = 5;

                // When: Retrieve 5 mandates
                var response = await MandateClient.GetMandateListAsync(customers.Items.First().Id, null, numberOfMandates);

                // Then
                Assert.True(response.Items.Count <= numberOfMandates);
            }
        }

        /// <summary>
        /// Defines the test method CanCreateMandate.
        /// </summary>
        /// <autogeneratedoc />
        [Fact]
        public async Task CanCreateMandate() {
            // We can only test this if there are customers
            var customers = await CustomerClient.GetCustomerListAsync();
            if (customers.Count > 0) {
                // If: We create a new mandate request
                var mandateRequest = new MandateRequest() {
                    ConsumerAccount = "NL26ABNA0516682814",
                    ConsumerName = "John Doe"
                };

                // When: We send the mandate request
                var mandateResponse = await MandateClient.CreateMandateAsync(customers.Items.First().Id, mandateRequest);

                // Then: Make sure we created a new mandate
                Assert.Equal(mandateRequest.ConsumerAccount, mandateResponse.Details.ConsumerAccount);
                Assert.Equal(mandateRequest.ConsumerName, mandateResponse.Details.ConsumerName);
            }
        }
    }
}
