name: $(Date:yyyy).1$(Date:MMdd).1$(Date:HHmm)

trigger:
- main

variables:
  - name: VersionNumber
    value: ''
  - name: VersionInformational  
    value: ''
  - name: VersionPackage
    value: ''

  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    - group: ACC
  - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    - group: PROD

pool:
  vmImage: 'windows-latest'

stages:
  - stage: BuildStage
    displayName: 'Build'
    jobs:
    - job: BuildJob
      displayName: 'Build, test and pack assemblies'
      timeoutInMinutes: 120
      steps:
        - task: PowerShell@2
          displayName: Set Version Variables
          inputs:
            targetType: 'inline'
            script: |
              $buildNumber = $Env:BUILD_BUILDNUMBER
              $parts = $buildNumber.Split('.')
              
              $versionMajor = $parts[0]    # yyyy
              $versionMinor = $parts[1]    # 1DDD
              $versionRevision = $parts[2]  # HHmm
              $versionBuild = if ($env:BUILD_REASON -eq 'PullRequest') { (Get-Date).Second } else { 0 }
              
              $versionNumber = "$versionMajor.$versionMinor.$versionRevision.$versionBuild"
              $versionInformational = "$versionMajor.$versionMinor.$versionRevision"
              $versionPackage = if ($env:BUILD_REASON -eq 'PullRequest') { "$versionNumber-preview" } else { $versionNumber }
              
              Write-Host "##vso[task.setvariable variable=VersionNumber]$versionNumber"
              Write-Host "##vso[task.setvariable variable=VersionInformational]$versionInformational"
              Write-Host "##vso[task.setvariable variable=VersionPackage]$versionPackage"

        - task: Assembly-Info-NetCore@3
          displayName: 'Set Release versions'
          inputs:
            FileNames: |
              src/**/*.csproj
              tests/**/*.csproj
            InsertAttributes: true
            WriteBOM: true
            VersionNumber: '$(VersionNumber)'
            FileVersionNumber: '$(VersionNumber)'
            InformationalVersion: '$(VersionInformational)'
            PackageVersion: '$(VersionPackage)'
            UpdateBuildNumber: '$(VersionPackage)'
            AddBuildTag: 'v$(VersionPackage)'

        - task: NuGetToolInstaller@1
          displayName: 'Install NuGet 6.12.2'
          inputs:
            versionSpec: 6.12.2

        - task: UseDotNet@2
          displayName: 'Install .Net Sdk'
          inputs:
            packageType: 'sdk'
            useGlobalJson: true

        # - task: DotNetCoreCLI@2
        #   displayName: 'Install MAUI workloads'
        #   inputs:
        #     command: custom
        #     custom: 'workload '
        #     arguments: 'install maui --source https://api.nuget.org/v3/index.json'

        - task: DownloadSecureFile@1
          displayName: 'Download secure file'
          inputs:
            secureFile: 'intelligence-online.pfx'

        - task: SonarCloudPrepare@3
          displayName: 'Prepare SonarCloud'
          inputs:
            SonarCloud: 'SonarCloud'
            organization: 'i-synergy'
            scannerMode: 'dotnet'
            projectKey: 'I-Synergy.Framework'
            projectName: 'I-Synergy.Framework'
            projectVersion: '$(VersionPackage)'

        - task: MSBuild@1
          displayName: 'Build I-Synergy Framework'
          inputs:
            solution: 'I-Synergy.Framework.slnx'
            msbuildArchitecture: 'x64'
            configuration: $(BuildConfiguration)
            msbuildArguments: '-p:Version=$(VersionPackage) -t:restore,build,pack -p:ContinuousIntegrationBuild=true /nr:false' #this flag is important to avoid DLL lock for the 2nd build/analysis

        - task: DotNetCoreCLI@2
          displayName: 'Test I-Synergy Framework'
          inputs:
            command: test
            projects: 'I-Synergy.Framework.slnx'
            arguments: '--configuration $(BuildConfiguration) --no-build --test-adapter-path:. --collect:"Code Coverage" --settings:codecoverage.runsettings'
       
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)\packages'
            Contents: '*'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: NuGetCommand@2
          displayName: 'Sign Nuget packages'
          inputs:
            command: 'custom'
            arguments: 'sign $(Build.ArtifactStagingDirectory)\*.nupkg -CertificatePath "$(Agent.WorkFolder)\_temp\intelligence-online.pfx" -CertificatePassword "$(CertPassword)" -Timestamper "$(TimestampUrl)"'

        - task: NuGetCommand@2
          displayName: 'Sign Nuget symbol packages'
          inputs:
            command: 'custom'
            arguments: 'sign $(Build.ArtifactStagingDirectory)\*.snupkg -CertificatePath "$(Agent.WorkFolder)\_temp\intelligence-online.pfx" -CertificatePassword "$(CertPassword)" -Timestamper "$(TimestampUrl)"'


        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts'
          inputs:
            pathtoPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: Output
            publishLocation: 'Container'

        - task: SonarCloudAnalyze@3
          displayName: 'Run SonarCloud analyzer'

        - task: SonarCloudPublish@3
          displayName: 'Publish SonarCloud analysis'
          inputs:
            pollingTimeoutSec: '300'

        - bash: |
            git push --prune https://$(GithubPAT)@github.com/I-Synergy/I-Synergy.Framework \
                +refs/remotes/origin/*:refs/heads/* +refs/tags/*:refs/tags/*
          displayName: 'Copy source to Github'
          # condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

  # - stage: DocStage
  #   displayName: 'Documentation'
  #   dependsOn: TestStage
  #   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  #   jobs:
  #   - job: DocJob
  #     displayName: 'Create API Documentation'
  #     steps:
  #       - task: UseDotNet@2
  #         inputs:
  #           packageType: 'sdk'
  #           version: 8.0.x
  #           useGlobalJson: false
  #           includePreviewVersions: true

  #       - task: ChocolateyToolInstaller@0
  #         inputs:
  #           force: true

  #       - task: ChocolateyCommand@0
  #         inputs:
  #           command: 'install'
  #           installPackageId: 'wkhtmltopdf'

  #       - task: DotNetCoreCLI@2
  #         displayName: 'Build Framework Documentation'
  #         inputs:
  #           command: build
  #           projects: 'docs\ISynergy.Framework\ISynergy.Framework.csproj'
  #           arguments: '-c $(BuildConfiguration)'

  #       - task: AzureCLI@2
  #         displayName: 'Delete Existing Files'
  #         inputs:
  #           azureSubscription: 'Azure'
  #           scriptType: 'pscore'
  #           scriptLocation: 'inlineScript'
  #           inlineScript: az storage blob delete-batch --source '$web' --account-name '$(AzureStorageAccountName)' --account-key '$(AzureStorageAccountKey)'
            
  #       - task: AzureCLI@2
  #         displayName: 'Upload new files'
  #         inputs:
  #           azureSubscription: 'Azure'
  #           scriptType: 'ps'
  #           scriptLocation: 'inlineScript'
  #           inlineScript: |
  #             $sourcePath = "docs\ISynergy.Framework\_site"
  #             az storage blob upload-batch --destination '$web' --source $sourcePath --account-name '$(AzureStorageAccountName)' --account-key '$(AzureStorageAccountKey)'

        #- task: AzureCLI@2
        #  displayName: 'Purge CDN'
        #  inputs:
        #    azureSubscription: 'Azure'
        #    scriptType: 'ps'
        #    scriptLocation: 'inlineScript'
        #    inlineScript: |
        #      az cdn endpoint purge -g 'i-synergy' -n '$(AzureCdnEndpoint)' --profile-name '$(AzureCdnProfile)' --content-paths '/*' --no-wait
        #  continueOnError: true

  - stage: Release
    displayName: 'Release'
    dependsOn: BuildStage
    condition: succeeded()
    jobs:
    - job: ArtifactsJob
      displayName: 'Get Nuget artifacts'
      steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'Output'

    - deployment: DeployNuget
      displayName: 'Deploy to Artifacts'
      environment: $(Environment)
      strategy:
        runOnce:
          deploy:
            steps:
              - task: NuGetCommand@2
                displayName: 'NuGet push - ISynergy Framework'
                inputs:
                  command: 'push'
                  packagesToPush: '$(Pipeline.Workspace)/Output/*.nupkg'
                  nuGetFeedType: 'external'
                  publishFeedCredentials: 'Nuget.org'