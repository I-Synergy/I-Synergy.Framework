using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using ISynergy.Framework.AspNetCore.Options;
using ISynergy.Framework.Core.Services;
using ISynergy.Framework.Storage.Abstractions;
using Microsoft.Azure.Storage;
using Microsoft.Azure.Storage.Auth;
using Microsoft.Azure.Storage.Blob;
using Microsoft.Extensions.Options;

namespace ISynergy.Framework.Storage.Azure.Services
{
    /// <summary>
    /// Class StorageService.
    /// Implements the <see cref="IStorageService" />
    /// </summary>
    /// <seealso cref="IStorageService" />
    /// <autogeneratedoc />
    public class StorageService : IStorageService
    {
        /// <summary>
        /// The azure document options
        /// </summary>
        /// <autogeneratedoc />
        private readonly AzureDocumentOptions _azureDocumentOptions;
        /// <summary>
        /// The cloud storage account
        /// </summary>
        /// <autogeneratedoc />
        private readonly CloudStorageAccount _cloudStorageAccount;
        /// <summary>
        /// The BLOB client
        /// </summary>
        /// <autogeneratedoc />
        private readonly CloudBlobClient _blobClient;
        /// <summary>
        /// The tenant service
        /// </summary>
        /// <autogeneratedoc />
        private readonly ITenantService _tenantService;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageService"/> class.
        /// </summary>
        /// <param name="tenantService">The tenant service.</param>
        /// <param name="azureDocumentOptions">The azure document options.</param>
        /// <exception cref="ArgumentNullException">tenantService</exception>
        /// <autogeneratedoc />
        public StorageService(
            ITenantService tenantService,
            IOptions<AzureDocumentOptions> azureDocumentOptions)
        {
            _tenantService = tenantService ?? throw new ArgumentNullException(nameof(tenantService));
            _azureDocumentOptions = azureDocumentOptions.Value;
            _cloudStorageAccount = new CloudStorageAccount(new StorageCredentials(_azureDocumentOptions.AccountName, _azureDocumentOptions.AccountKey), true);
            _blobClient = _cloudStorageAccount.CreateCloudBlobClient();
        }

        /// <summary>
        /// Creates the container.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>CloudBlobContainer.</returns>
        /// <autogeneratedoc />
        private async Task<CloudBlobContainer> CreateContainer(CancellationToken cancellationToken = default)
        {
            var tenantId = _tenantService.TenantId;

            if (tenantId == Guid.Empty)
                return null;

            var container = _blobClient.GetContainerReference(tenantId.ToString());
            await container.CreateIfNotExistsAsync()
                .ConfigureAwait(false);

            await container.SetPermissionsAsync(
                new BlobContainerPermissions() { PublicAccess = BlobContainerPublicAccessType.Blob })
                .ConfigureAwait(false);

            return container;
        }

        /// <summary>
        /// Gets the cloud BLOB.
        /// </summary>
        /// <param name="container">The container.</param>
        /// <param name="contentType">Type of the content.</param>
        /// <param name="filename">The filename.</param>
        /// <param name="folder">The folder.</param>
        /// <returns>CloudBlockBlob.</returns>
        /// <autogeneratedoc />
        private CloudBlockBlob GetCloudBlob(CloudBlobContainer container, string contentType, string filename, string folder)
        {
            var blobFile = container.GetBlockBlobReference(Path.Combine(folder, filename));
            blobFile.Properties.ContentType = contentType;
            return blobFile;
        }

        /// <summary>
        /// upload file as an asynchronous operation.
        /// </summary>
        /// <param name="file">The file.</param>
        /// <param name="contentType">Type of the content.</param>
        /// <param name="filename">The filename.</param>
        /// <param name="folder">The folder.</param>
        /// <param name="cancellationToken">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Task&lt;Uri&gt;.</returns>
        /// <exception cref="StorageException">CloudBlob not found.</exception>
        /// <autogeneratedoc />
        public async Task<Uri> UploadFileAsync(byte[] file, string contentType, string filename, string folder, CancellationToken cancellationToken = default)
        {
            var container = await CreateContainer(cancellationToken)
                .ConfigureAwait(false);

            if (container is null)
                return null;

            var blob = GetCloudBlob(container, contentType, filename, folder);

            if (blob != null)
            {
                await blob.UploadFromByteArrayAsync(file, 0, file.Length)
                    .ConfigureAwait(false);
                return blob.Uri;
            }

            throw new StorageException("CloudBlob not found.");
        }

        /// <summary>
        /// download file as an asynchronous operation.
        /// </summary>
        /// <param name="filename">The filename.</param>
        /// <param name="folder">The folder.</param>
        /// <param name="cancellationToken">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Task&lt;System.Byte[]&gt;.</returns>
        /// <autogeneratedoc />
        public async Task<byte[]> DownloadFileAsync(string filename, string folder, CancellationToken cancellationToken = default)
        {
            byte[] result = null;

            var container = await CreateContainer(cancellationToken)
                .ConfigureAwait(false);

            if (container is null) return null;

            var blobFile = container.GetBlockBlobReference(Path.Combine(folder, filename));

            if (blobFile != null)
            {
                await blobFile.FetchAttributesAsync()
                    .ConfigureAwait(false);

                var fileSize = blobFile.Properties.Length;

                result = new byte[fileSize];

                for (var i = 0; i < fileSize; i++)
                {
                    result[i] = 0x20;
                }

                await blobFile.DownloadToByteArrayAsync(result, 0)
                    .ConfigureAwait(false);
            }

            return result;
        }

        /// <summary>
        /// update file as an asynchronous operation.
        /// </summary>
        /// <param name="file">The file.</param>
        /// <param name="contentType">Type of the content.</param>
        /// <param name="filename">The filename.</param>
        /// <param name="folder">The folder.</param>
        /// <param name="cancellationToken">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Task&lt;Uri&gt;.</returns>
        /// <exception cref="StorageException">CloudBlob not found.</exception>
        /// <autogeneratedoc />
        public async Task<Uri> UpdateFileAsync(byte[] file, string contentType, string filename, string folder, CancellationToken cancellationToken = default)
        {
            var container = await CreateContainer(cancellationToken)
                .ConfigureAwait(false);

            if (container is null)
                return null;

            var blob = GetCloudBlob(container, contentType, filename, folder);

            if (blob != null)
            {
                await blob.DeleteIfExistsAsync()
                    .ConfigureAwait(false);

                await blob.UploadFromByteArrayAsync(file, 0, file.Length)
                    .ConfigureAwait(false);

                return blob.Uri;
            }

            throw new StorageException("CloudBlob not found.");
        }

        /// <summary>
        /// remove file as an asynchronous operation.
        /// </summary>
        /// <param name="filename">The filename.</param>
        /// <param name="folder">The folder.</param>
        /// <param name="cancellationToken">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Task&lt;System.Boolean&gt;.</returns>
        /// <autogeneratedoc />
        public async Task<bool> RemoveFileAsync(string filename, string folder, CancellationToken cancellationToken = default)
        {
            var container = await CreateContainer(cancellationToken)
                .ConfigureAwait(false);

            if (container is null)
                return false;

            var blobFile = container.GetBlockBlobReference(Path.Combine(folder, filename));

            if (blobFile != null)
            {
                return await blobFile.DeleteIfExistsAsync()
                    .ConfigureAwait(false);
            }

            return false;
        }
    }
}
