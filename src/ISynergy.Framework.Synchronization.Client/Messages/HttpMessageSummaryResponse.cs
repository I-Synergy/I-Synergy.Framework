using ISynergy.Framework.Synchronization.Client.Enumerations;
using ISynergy.Framework.Synchronization.Client.Messages.Base;
using ISynergy.Framework.Synchronization.Core;
using ISynergy.Framework.Synchronization.Core.Batch;
using ISynergy.Framework.Synchronization.Core.Enumerations;
using ISynergy.Framework.Synchronization.Core.Messages;
using ISynergy.Framework.Synchronization.Core.Set;
using System;
using System.Runtime.Serialization;

namespace ISynergy.Framework.Synchronization.Client.Messages
{
    [DataContract(Name = "summary"), Serializable]
    public class HttpMessageSummaryResponse : BaseHttpMessage
    {
        public HttpMessageSummaryResponse() : base() { }

        public HttpMessageSummaryResponse(SyncContext context) : base(context) { }

        /// <summary>
        /// Gets or Sets the conflict resolution policy from the server
        /// </summary>

        [DataMember(Name = "bi", IsRequired = false, EmitDefaultValue = false)]
        public BatchInfo BatchInfo { get; set; }

        /// <summary>
        /// The remote client timestamp generated by the server database
        /// </summary>
        [DataMember(Name = "rct", IsRequired = false, EmitDefaultValue = false)]
        public long RemoteClientTimestamp { get; set; }


        [DataMember(Name = "step", IsRequired = true)]
        public HttpStep Step { get; set; }

        /// <summary>
        /// Gets or Sets the container changes when in memory requested by the client
        /// </summary>
        [DataMember(Name = "changes", IsRequired = false, EmitDefaultValue = false)]
        public ContainerSet Changes { get; set; }

        [DataMember(Name = "scs", IsRequired = false, EmitDefaultValue = false)]
        public DatabaseChangesSelected ServerChangesSelected { get; set; }

        [DataMember(Name = "cca", IsRequired = false, EmitDefaultValue = false)]
        public DatabaseChangesApplied ClientChangesApplied { get; set; }

        [DataMember(Name = "crp", IsRequired = false, EmitDefaultValue = false)]
        public ConflictResolutionPolicy ConflictResolutionPolicy { get; set; }

    }
}
