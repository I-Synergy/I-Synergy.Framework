using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using ISynergy.Framework.Payment.ContractResolvers;
using ISynergy.Framework.Payment.Converters;
using ISynergy.Framework.Payment.Extensions;
using ISynergy.Framework.Payment.Mollie.Abstractions.Clients;
using ISynergy.Framework.Payment.Mollie.Models.Connect;

namespace ISynergy.Framework.Payment.Mollie.Base
{
    /// <summary>
    /// Class ConnectClient.
    /// Implements the <see cref="IConnectClient" />
    /// </summary>
    /// <seealso cref="IConnectClient" />
    public class ConnectClient : IConnectClient
    {
        /// <summary>
        /// The authorize end point
        /// </summary>
        public const string AuthorizeEndPoint = "https://www.mollie.com/oauth2/authorize";
        /// <summary>
        /// The token end point
        /// </summary>
        public const string TokenEndPoint = "https://api.mollie.nl/oauth2/tokens";

        /// <summary>
        /// The client identifier
        /// </summary>
        private readonly string _clientId;
        /// <summary>
        /// The client secret
        /// </summary>
        private readonly string _clientSecret;

        /// <summary>
        /// The HTTP client
        /// </summary>
        private readonly HttpClient _httpClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectClient" /> class.
        /// </summary>
        /// <param name="clientId">The client identifier.</param>
        /// <param name="clientSecret">The client secret.</param>
        /// <param name="httpClient">The HTTP client.</param>
        /// <exception cref="ArgumentNullException">clientId</exception>
        /// <exception cref="ArgumentNullException">clientSecret</exception>
        /// <exception cref="ArgumentNullException">clientId</exception>
        public ConnectClient(string clientId, string clientSecret, HttpClient httpClient = null)
        {
            if (string.IsNullOrWhiteSpace(clientId))
            {
                throw new ArgumentNullException(nameof(clientId));
            }

            if (string.IsNullOrWhiteSpace(clientSecret))
            {
                throw new ArgumentNullException(nameof(clientSecret));
            }

            _httpClient = httpClient ?? new HttpClient();
            _clientSecret = clientSecret;
            _clientId = clientId;
        }

        /// <summary>
        /// Constructs the Authorize URL for the Authorize endpoint from the parameters
        /// </summary>
        /// <param name="state">A random string generated by your app to prevent CSRF attacks.</param>
        /// <param name="scopes">A space separated list of permissions your app requires. Refer to OAuth: Permissions for more
        /// information about the available scopes.</param>
        /// <param name="redirectUri">The URL the merchant is sent back to once the request has been authorized. If given, it must
        /// match the URL you set when registering your app.</param>
        /// <param name="forceApprovalPrompt">This parameter can be set to force, to force showing the consent screen to the
        /// merchant, even when it is not necessary</param>
        /// <returns>The url to the mollie consent screen.</returns>
        public string GetAuthorizationUrl(string state, List<string> scopes, string redirectUri = null, bool forceApprovalPrompt = false)
        {
            var parameters = new Dictionary<string, string> {
                {"client_id", _clientId},
                {"state", state},
                {"scope", string.Join(" ", scopes)},
                {"response_type", "code"},
                {"approval_prompt", forceApprovalPrompt ? "force" : "auto"}
            };
            parameters.AddValueIfNotNullOrEmpty("redirect_uri", redirectUri);

            return AuthorizeEndPoint + parameters.ToQueryString();
        }

        /// <summary>
        /// get access token as an asynchronous operation.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>An token object.</returns>
        public async Task<TokenResponse> GetAccessTokenAsync(TokenRequest request)
        {
            var jsonData = JsonConvertExtensions.SerializeObjectSnakeCase(request);
            var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
            var httpRequest = CreateHttpRequest(HttpMethod.Post, TokenEndPoint, content);

            var response = await _httpClient.SendAsync(httpRequest).ConfigureAwait(false);
            var resultContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);

            return JsonSerializer.Deserialize<TokenResponse>(resultContent, new JsonSerializerSettings { ContractResolver = new SnakeCasePropertyNamesContractResolver() });
        }

        /// <summary>
        /// Creates the HTTP request.
        /// </summary>
        /// <param name="method">The method.</param>
        /// <param name="url">The URL.</param>
        /// <param name="content">The content.</param>
        /// <returns>HttpRequestMessage.</returns>
        private HttpRequestMessage CreateHttpRequest(HttpMethod method, string url, HttpContent content = null)
        {
            var httpRequest = new HttpRequestMessage(method, new Uri(url));
            httpRequest.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            httpRequest.Headers.Authorization = new AuthenticationHeaderValue("Basic", Base64Encode($"{_clientId}:{_clientSecret}"));
            httpRequest.Content = content;

            return httpRequest;
        }

        /// <summary>
        /// Base64s the encode.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>System.String.</returns>
        private string Base64Encode(string value)
        {
            var bytes = Encoding.UTF8.GetBytes(value);
            return Convert.ToBase64String(bytes);
        }
    }
}
