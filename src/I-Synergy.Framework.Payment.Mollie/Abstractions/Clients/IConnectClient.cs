using System.Collections.Generic;
using System.Threading.Tasks;
using ISynergy.Framework.Payment.Mollie.Models.Connect;

namespace ISynergy.Framework.Payment.Mollie.Abstractions.Clients
{
    /// <summary>
    /// Interface IConnectClient
    /// </summary>
    /// <autogeneratedoc />
    public interface IConnectClient
    {
        /// <summary>
        /// Constructs the Authorize URL for the Authorize endpoint from the parameters
        /// </summary>
        /// <param name="state">A random string generated by your app to prevent CSRF attacks.</param>
        /// <param name="scopes">A space separated list of permissions your app requires. Refer to OAuth: Permissions for more
        /// information about the available scopes.</param>
        /// <param name="redirectUri">The URL the merchant is sent back to once the request has been authorized. If given, it must
        /// match the URL you set when registering your app.</param>
        /// <param name="forceApprovalPrompt">This parameter can be set to force, to force showing the consent screen to the
        /// merchant, even when it is not necessary</param>
        /// <returns>The url to the mollie consent screen.</returns>
        string GetAuthorizationUrl(string state, List<string> scopes, string redirectUri = null,
            bool forceApprovalPrompt = false);

        /// <summary>
        /// Exchange the auth code received at the Authorize endpoint for an actual access token, with which you can
        /// communicate with the ISynergy.Framework.Payment.Mollie API.
        /// Or Refresh the accestoken
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>An token object.</returns>
        Task<TokenResponse> GetAccessTokenAsync(TokenRequest request);
    }
}
