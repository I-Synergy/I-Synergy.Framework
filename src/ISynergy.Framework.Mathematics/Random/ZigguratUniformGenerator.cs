namespace ISynergy.Framework.Mathematics.Random
{
    /// <summary>
    ///     Uniform random number generator using the Ziggurat method.
    /// </summary>
    /// <remarks>
    ///     <para>
    ///         References:
    ///         <list type="bullet">
    ///             <item>
    ///                 <description>
    ///                     <a href="http://people.sc.fsu.edu/~jburkardt/c_src/ziggurat/ziggurat.html">
    ///                         John Burkard, Ziggurat Random Number Generator (RNG). Available on:
    ///                         http://people.sc.fsu.edu/~jburkardt/c_src/ziggurat/ziggurat.c (LGPL)
    ///                     </a>
    ///                 </description>
    ///             </item>
    ///             <item>
    ///                 <description>
    ///                     Philip Leong, Guanglie Zhang, Dong-U Lee, Wayne Luk, John Villasenor,
    ///                     A comment on the implementation of the ziggurat method,
    ///                     Journal of Statistical Software, Volume 12, Number 7, February 2005.
    ///                 </description>
    ///             </item>
    ///             <item>
    ///                 <description>
    ///                     George Marsaglia, Wai Wan Tsang, The Ziggurat Method for Generating Random Variables,
    ///                     Journal of Statistical Software, Volume 5, Number 8, October 2000, seven pages.
    ///                 </description>
    ///             </item>
    ///         </list>
    ///     </para>
    /// </remarks>
    public sealed class ZigguratUniformGenerator :
        IRandomNumberGenerator<double>
    {
        private readonly ZigguratUniformOneGenerator u;
        /// <summary>
        ///     Initializes a new instance of the <see cref="ZigguratExponentialGenerator" /> class.
        /// </summary>
        /// <param name="max">The upper bound for generated values.</param>
        /// <param name="min">The lower bound for generated values.</param>
        public ZigguratUniformGenerator(double min, double max)
            : this(min, max, Generator.Random.Next())
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ZigguratUniformOneGenerator" /> class.
        /// </summary>
        /// <param name="seed">
        ///     The random seed to use. Default is to use the next value from
        ///     the <see cref="Generator">the framework-wide random generator</see>.
        /// </param>
        /// <param name="max">The upper bound for generated values.</param>
        /// <param name="min">The lower bound for generated values.</param>
        public ZigguratUniformGenerator(double min, double max, int seed)
        {
            u = new ZigguratUniformOneGenerator(seed);
            Min = min;
            Length = max - min;
        }

        /// <summary>
        ///     Gets or sets the lower bound for the values generated by this instance.
        /// </summary>
        public double Min { get; set; }

        /// <summary>
        ///     Gets or sets the length of the interval for values generated by this
        ///     instance. The upper bound will be given by <c><see cref="Min" /> + Length</c>.
        /// </summary>
        public double Length { get; set; }

        /// <summary>
        ///     Generates a random vector of observations from the current distribution.
        /// </summary>
        /// <param name="samples">The number of samples to generate.</param>
        /// <returns>
        ///     A random vector of observations drawn from this distribution.
        /// </returns>
        public double[] Generate(int samples)
        {
            return Generate(samples, new double[samples]);
        }

        /// <summary>
        ///     Generates a random vector of observations from the current distribution.
        /// </summary>
        /// <param name="samples">The number of samples to generate.</param>
        /// <param name="result">The location where to store the samples.</param>
        /// <returns>
        ///     A random vector of observations drawn from this distribution.
        /// </returns>
        public double[] Generate(int samples, double[] result)
        {
            for (var i = 0; i < samples; i++)
                result[i] = Generate();
            return result;
        }
        /// <summary>
        ///     Generates a random vector of observations from the current distribution.
        /// </summary>
        /// <returns>
        ///     A random vector of observations drawn from this distribution.
        /// </returns>
        public double Generate()
        {
            return u.Generate() * Length + Min;
        }
    }
}